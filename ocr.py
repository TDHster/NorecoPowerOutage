from pathlib import Path
from PIL import Image, ImageEnhance
import easyocr
import numpy as np
from typing import List, Tuple, Any

from logger import logger

def enhance_image_steps(img_path: Path) -> Image.Image:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ –∏ –ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç.
    –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ Image.
    """
    image = Image.open(img_path).convert("L")
    image = ImageEnhance.Contrast(image).enhance(2.0)
    return image

def crop_image(image: Image.Image, top: int = 0, bottom: int = 0, left: int = 0, right: int = 0, save_test: bool = True, original_path: Path | None = Path('images/cropped-test.jpg')) -> Image.Image:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É, —Å–Ω–∏–∑—É –∏ –ø–æ –∫—Ä–∞—è–º –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    
    Args:
        image: PIL Image –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
        top: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–≤–µ—Ä—Ö—É
        bottom: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–Ω–∏–∑—É  
        left: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–ª–µ–≤–∞
        right: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–ø—Ä–∞–≤–∞
        save_test: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
        original_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ)
    
    Returns:
        Image.Image: –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    width, height = image.size
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–µ–∑–∫–∏
    if left + right >= width or top + bottom >= height:
        logger.warning("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return image
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
    crop_box = (
        left,                    # –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        top,                     # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        width - right,           # –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        height - bottom          # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    )
    
    cropped_image = image.crop(crop_box)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
    # if save_test and original_path:
    if save_test:
        # test_path = original_path.parent / f"cropped_{original_path.stem}.jpg"
        cropped_image.save(str(original_path))
        logger.debug(f"üîç –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {str(original_path)}")
    
    return cropped_image


def ocr_file(file_path: Path, lang: str = "en") -> str | None:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        lang: –Ø–∑—ã–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "en")
        
    Returns:
        str | None: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not file_path.exists():
        logger.error(f"üõë –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
        
    if not file_path.suffix.lower() in ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']:
        logger.error(f"üõë –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_path.suffix}")
        return None

    logger.debug(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª: {file_path.name}")
    
    reader = easyocr.Reader([lang], gpu=False)

    try:
        image = enhance_image_steps(file_path)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {file_path.name}: {e}")
        return None
    
    try:
        # image = crop_image(image, top=320, bottom=220, save_test=True, original_path=None)
        image = crop_image(image, top=320, bottom=220)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {file_path.name}: {e}")
        return None
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image ‚Üí numpy array
        image_np = np.array(image)
        # –ü–µ—Ä–µ–¥–∞—ë–º –≤ easyocr - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (bbox, text, confidence)
        results = reader.readtext(image_np)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR –¥–ª—è {file_path.name}: {e}")
        return None

    text_lines = [result[1] for result in results]  # type: ignore[misc]
    full_text = "\n".join(text_lines)

    logger.debug(f'‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {full_text[:50]}...')
    
    return full_text if full_text.strip() else None


if __name__ == "__main__":
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ images
    images_dir = Path("images")
    
    if not images_dir.exists():
        print(f"–ö–∞—Ç–∞–ª–æ–≥ {images_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_files = []
    for ext in image_extensions:
        image_files.extend(images_dir.glob(f"*{ext}"))
        image_files.extend(images_dir.glob(f"*{ext.upper()}"))
    
    if not image_files:
        print(f"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ {images_dir}")
        exit(1)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(image_files)} —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    processed_count = 0
    for image_file in image_files:
        print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {image_file.name}")
        result = recognize_text_in_folder(image_file)
        
        if result:
            print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result}")
            processed_count += 1
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{len(image_files)} —Ñ–∞–π–ª–æ–≤")
