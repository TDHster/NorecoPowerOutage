from pathlib import Path
from PIL import Image, ImageEnhance
import easyocr

from logger import logger

def enhance_image_steps(img_path: Path) -> Image.Image:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ –∏ –ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç.
    –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ Image.
    """
    image = Image.open(img_path).convert("L")
    image = ImageEnhance.Contrast(image).enhance(2.0)
    return image

def crop_image(image: Image.Image, top: int = 0, bottom: int = 0, left: int = 0, right: int = 0, save_test: bool = True, original_path: Path = None) -> Image.Image:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É, —Å–Ω–∏–∑—É –∏ –ø–æ –∫—Ä–∞—è–º –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    
    Args:
        image: PIL Image –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
        top: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–≤–µ—Ä—Ö—É
        bottom: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–Ω–∏–∑—É  
        left: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–ª–µ–≤–∞
        right: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–ø—Ä–∞–≤–∞
        save_test: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
        original_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ)
    
    Returns:
        Image.Image: –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    width, height = image.size
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–µ–∑–∫–∏
    if left + right >= width or top + bottom >= height:
        logger.warning("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return image
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
    crop_box = (
        left,                    # –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        top,                     # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        width - right,           # –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        height - bottom          # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    )
    
    cropped_image = image.crop(crop_box)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
    # if save_test and original_path:
    if save_test:
        # test_path = original_path.parent / f"cropped_{original_path.stem}.jpg"
        cropped_image.save('images/cropped.jpg')
        logger.debug(f"üîç –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    return cropped_image


def recognize_text_in_folder(folder: Path, lang: str = "en"):
    """
    –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ—Ö .jpg —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt —Ä—è–¥–æ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
    """
    reader = easyocr.Reader([lang], gpu=False)
    jpg_files = list(folder.glob("*.jpg"))

    if not jpg_files:
        logger.info("üõë –ù–µ—Ç JPG-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ:", folder)
        return

    logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(jpg_files)} .jpg-—Ñ–∞–π–ª–æ–≤ –≤ {folder}")

    for i, img_path in enumerate(jpg_files, 1):
        logger.debug(f"\n[{i}/{len(jpg_files)}] üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {img_path.name}")

        try:
            image = enhance_image_steps(img_path)
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {img_path.name}: {e}")
            continue
        
        try:
            image = crop_image(image, save_test=True, original_path='images')
        except Exception as e:
            logger.error(f"Error while cropping image {e}")
            continue
        exit(0)
        
        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ —Å Pillow-–æ–±—ä–µ–∫—Ç–∞
            results = reader.readtext(image)
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR –¥–ª—è {img_path.name}: {e}")
            continue

        text_lines = [res[1] for res in results]
        full_text = "\n".join(text_lines)

        txt_path = img_path.with_suffix(".txt")
        txt_path.write_text(full_text, encoding="utf-8")

        logger.debug(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {txt_path.name}")

    logger.info("\nüéâ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    recognize_text_in_folder(Path("images"))
